let SelectableElement = function(t) {
    this.selected = !1, this.element = t
}

let List = function(t) {
    Map.call(this, t)
}

let Map = function(t) {
    void 0 != t && "object" == typeof t || (t = {}), this.contents = t
}
SelectableElement.prototype.getElement = function() {
    return this.element
}, SelectableElement.prototype.isSelected = function() {
    return 1 == this.selected
}, SelectableElement.prototype.setSelected = function(t) {
    return this.selected = t, this.isSelected() ? this.getElement().addClass("selected") : this.getElement().removeClass("selected"), this
}, SelectableElement.prototype.select = function() {
    return this.setSelected(!0), this
}, SelectableElement.prototype.deselect = function() {
    return this.setSelected(!1), this
}, List.prototype = Object.create(Map.prototype), List.prototype.constructor = List, List.prototype.add = function(t, e) {
    return this.put(t, e), this
}, Map.prototype.getContents = function() { 
    return this.contents
}, Map.prototype.setContents = function(t) {
    return this.contents = t, this
}, Map.prototype.put = function(t, e) {
    return "string" == typeof t && t.indexOf(".") > -1 ? this.setByString(t, e) : this.getContents()[t] = e, this
}, Map.prototype.remove = function(t) {
    return delete this.getContents()[t], this
}, Map.prototype.get = function(t) {
    return "string" == typeof t && t.indexOf(".") > -1 ? this.getByString(t) : this.getContents()[t]
}, Map.prototype.each = function(t) {
    var e = this.getContents();
    for (var n in e) {
        var r = t.call(this, n, e[n]);
        if (void 0 != r && 0 == r) break
    }
}, Map.prototype.eachOf = function(t, e) {
    var n = this.getByString(t);
    if ("function" == typeof e)
        for (var r in n) {
            var o = e.call(this, r, n[r]);
            if (void 0 != o && 0 == o) break
        }
}, Map.prototype.getByString = function(t) {
    var e = t,
        n = this.getContents();
    try {
        for (var r = (e = (e = e.replace(/\[(\w+)\]/g, ".$1")).replace(/^\./, "")).split("."), o = 0, i = r.length; o < i; ++o) {
            var s = r[o];
            if (!(s in n)) return;
            n = n[s]
        }
        return n
    } catch (t) {
        return
    }
}, Map.prototype.setByString = function(t, e) {
    for (var n = t.split("."), r = this.getContents(), o = 0; o < n.length - 1;) void 0 === r[n[o]] && (r[n[o]] = {}), r = r[n[o]], o++;
    return r[n[n.length - 1]] = e, this
}, Map.prototype.isEmpty = function() {
    var t = this.getContents();
    for (var e in t)
        if (t.hasOwnProperty(e)) return !1;
    return JSON.stringify(t) === JSON.stringify({})
}, Map.prototype.isFirstValue = function(t) {
    var e = this.getContents();
    return t == e[Object.keys(e)[0]]
}, Map.prototype.isLastValue = function(t) {
    var e = this.getContents(),
        n = Object.keys(e);
    return t == e[n[n.length - 1]]
}, Map.prototype.getKeys = function() {
    return Object.keys(this.contents)
}, Map.prototype.size = function() {
    return this.getKeys().length
}, Map.prototype.sort = function(t, e) {
    var n = this.contents,
        r = {};
    for (var o in n) {
        var i = n[o];
        r[t] = i, t = e.call(this, o, i)
    }
    return this.contents = r, this
}, Map.prototype.clear = function() {
    return this.contents = {}, this
};   
